<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_167994_training.InternRegistration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>InternRegistration</name>
        <script><![CDATA[var InternRegistration = Class.create();

InternRegistration.prototype = {
    initialize: function() {},

    getUserID: function(record) {
        var userid;
        var gr = new GlideRecord('sys_user');
        gr.addQuery("email", record.email);
        gr.query();

        if (gr.next()) {
            //gs.info("got user");
            return gr.sys_id;
        } else {
            //gs.info("add user");
            gr = new GlideRecord('sys_user');
            gr.newRecord();
            gr.first_name = record.first_name;
            gr.last_name = record.last_name;
            gr.email = record.email;
            gr.user_name = String(record.first_name).toLowerCase() + "." + String(record.last_name).toLowerCase();
            gr.active = true;
            gr.insert();
            //gs.info("added user");
            return gr.sys_id;
        }
    },

    hasTrainingPlan: function(user_id) {

        var tp = new GlideRecord('x_167994_training_training_plan');
        tp.addQuery("user", user_id);
        tp.query();

        if (tp.next()) {
            return true;
        } else {
            return false;
        }
    },
    
	getTrainingPlan: function(user_id) {

        var tp = new GlideRecord('x_167994_training_training_plan');
        tp.addQuery("user", user_id);
        tp.query();

        if (tp.next()) {
            return tp.sys_id;
        } else {
            return false;
        }
    },

    getPaths: function(key) {
        return ['8e3b16232fe17010b14c5fd62799b69c', '2b3afafc2fb93410b14c5fd62799b6b4'];
    },

    assignPaths: function(list, tp_id) {
        var gr = new GlideRecord('x_167994_training_path_assignment');
        gr.addQuery("training_plan", tp_id);
        gr.query();
        var alreadyAssigned = [];
        while (gr.next()) {
            alreadyAssigned.push(String(gr.path));
        }
        gs.info("alreadyAssigned: " + alreadyAssigned);

        var i;
        gr = new GlideRecord('x_167994_training_path_assignment');
        for (i = 0; i < list.length; i++) {
            gs.info("alreadyAssigned: " + alreadyAssigned + "\nlist[i]" + list[i]);
            if (alreadyAssigned.indexOf(String(list[i]))==-1) {
                gr.newRecord();
                gr.training_plan = tp_id;
                gr.path = list[i];
                gr.insert();
                gs.info(list[i] + "added");
            }
        }
    },

    type: 'NewInclude'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-06 18:28:07</sys_created_on>
        <sys_id>076331b12ff13010b14c5fd62799b66e</sys_id>
        <sys_mod_count>34</sys_mod_count>
        <sys_name>InternRegistration</sys_name>
        <sys_package display_value="Training Tracker" source="x_167994_training">b9a77c3c2f1130101caaff1df699b687</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Training Tracker">b9a77c3c2f1130101caaff1df699b687</sys_scope>
        <sys_update_name>sys_script_include_076331b12ff13010b14c5fd62799b66e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-09 21:23:42</sys_updated_on>
    </sys_script_include>
</record_update>
